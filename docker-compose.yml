version: "3.9"

# -------------------------------
# COMMON AIRFLOW SERVICE SETTINGS
# -------------------------------
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  env_file:
    - .env  # Environment variables automatically created in Codespaces
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
    AIRFLOW__CORE__FERNET_KEY: ""  # Optional: generated dynamically for encryption
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 60
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: "True"
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    AIRFLOW__WEBSERVER__WORKERS: 2
    AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: 10
    _PIP_ADDITIONAL_REQUIREMENTS: ""
  volumes:
    # Mount local folders into the Airflow container for DAGs, logs, and scripts
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./scripts:/opt/airflow/scripts
    - ./data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    - postgres

# -------------------------------
# DATABASE SERVICE
# -------------------------------
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  # --------------------------------
  # ONE-TIME INITIALIZATION SERVICE
  # --------------------------------
  airflow-init:
    <<: *airflow-common
    entrypoint: >
      bash -c "
      airflow db init &&
      airflow users create \
        --username admin \
        --firstname admin \
        --lastname admin \
        --role Admin \
        --email admin@example.com \
        --password admin
      "
    restart: "no"

  # -------------------------------
  # AIRFLOW WEBSERVER SERVICE
  # -------------------------------
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"  # Port forwarded automatically in Codespaces
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # -------------------------------
  # AIRFLOW SCHEDULER SERVICE
  # -------------------------------
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

# -------------------------------
# NAMED VOLUMES
# -------------------------------
volumes:
  postgres-db-volume:
